{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>  </p> <p> \ud83d\udd11 Authentication Library for React Js for Token Based Auth with Json Web Token(JWT) \ud83d\udd11 </p> <p>                </p>  <p>React Auth Kit is a lightweight <code>auth state management</code> library for React JS based projects.</p> <p>It is production-ready, and gives you the following:</p> <ul> <li>\ud83d\udce6 Very lightweight</li> <li>\ud83d\udd27 Easy to use</li> <li>\u269b\ufe0f Build for React JS</li> <li>\u26a1 Works with Gastsby, Next JS</li> <li>\ud83d\ude80 Fast and easy to Implement</li> <li>\ud83d\udee1\ufe0f Supports Json Web Token (JWT)</li> <li>\ud83d\udd12 Secure Client Side Authentication</li> <li>\u2328\ufe0f Highly typed and written in <code>TypeScript</code></li> </ul>  <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"authdata/","title":"Authenticated User's Data","text":"<p>Get the Authorized user's state from any Component simply by using <code>HOC</code> or <code>Hooks</code></p> <ul> <li>To get the Authorized user's state from Higher Order Components, use <code>withAuthUser</code></li> <li>To get the Authorized user's state using React Hooks, use <code>useAuthUser</code></li> </ul>"},{"location":"authdata/#using-hooks","title":"Using Hooks","text":"<pre><code>import {useAuthUser} from 'react-auth-kit'\n</code></pre>"},{"location":"authdata/#demo","title":"Demo","text":"<pre><code>import React from 'react'\nimport {useAuthUser} from 'react-auth-kit'\n\nconst SomeComponent = () =&gt; {\n    const auth = useAuthUser()\n\n    return(\n        &lt;div&gt;\n            Hello {auth().user}\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"authdata/#using-higher-order-component","title":"Using Higher Order Component","text":"<pre><code>import {withAuthUser} from 'react-auth-kit'\n</code></pre>"},{"location":"authdata/#demo_1","title":"Demo","text":"<pre><code>import React from 'react'\nimport {withAuthUser} from 'react-auth-kit'\n\nclass SomeComponent extends React.Component {\n    render(){\n        return (\n            &lt;div&gt;\n                Hello {this.props.authState.user}\n            &lt;/div&gt;\n        )\n    }\n}\n\nexport default withAuthUser(SomeComponent)\n</code></pre> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"authheader/","title":"Authentication Header","text":"<p>Get the Auth Header for future request from any Component simply by using <code>HOC</code> or <code>Hooks</code></p> <ul> <li>To get the Auth Header from Higher Order Components, use <code>withAuthHeader</code></li> <li>To get the Auth Header using React Hooks, use <code>useAuthHeader</code></li> </ul>"},{"location":"authheader/#using-hooks","title":"Using Hooks","text":"<pre><code>import {useAuthHeader} from 'react-auth-kit'\n</code></pre>"},{"location":"authheader/#demo","title":"Demo","text":"<pre><code>import React from 'react'\nimport {useAuthHeader} from 'react-auth-kit'\n\nconst SomeComponent = () =&gt; {\n    const authHeader = useAuthHeader()\n\n    return(\n        &lt;div&gt;\n            {authHeader}\n        &lt;/div&gt;\n    )\n}\n</code></pre>"},{"location":"authheader/#using-higher-order-component","title":"Using Higher Order Component","text":"<pre><code>import {withAuthHeader} from 'react-auth-kit'\n</code></pre>"},{"location":"authheader/#demo_1","title":"Demo","text":"<pre><code>import React from 'react'\nimport {withAuthHeader} from 'react-auth-kit'\n\nclass SomeComponent extends React.Component {\n    render(){\n        return (\n            &lt;div&gt;\n                {this.props.authHeader}\n            &lt;/div&gt;\n        )\n    }\n}\n\nexport default withAuthHeader(SomeComponent)\n</code></pre> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"checkauth/","title":"Check the Authentication status","text":"<p>Check if any user is authenticated or not</p>"},{"location":"checkauth/#introduction","title":"Introduction","text":"<p>There are many times, when you have to understand if any user is authenticated (especially in <code>login</code> pages, where you have to redirect your user to its dashboard or allow to login)</p> <p>For this reason, <code>React Auth Kit</code> comes with <code>isAuth</code> functions</p>  <p><code>IsAuth</code> functionality available in both <code>hook</code> and <code>Higher Order Component</code></p> <ul> <li>For Functional Components, you can use <code>useIsAuthenticated</code> function inside any components</li> <li>For class based components, you can wrap the component inside <code>withIsAuthenticated</code> function</li> </ul>"},{"location":"checkauth/#usage","title":"Usage","text":""},{"location":"checkauth/#functional-component","title":"Functional Component","text":"<p>Check the <code>authentication status</code> in React Functional Components(FC) by adding the <code>useIsAuthenticated</code> hook inside it.</p>"},{"location":"checkauth/#import","title":"Import","text":"<pre><code>import {useIsAuthenticated} from 'react-auth-kit';\n</code></pre>"},{"location":"checkauth/#demo","title":"Demo","text":"<pre><code>import {useIsAuthenticated} from 'react-auth-kit';\n\nconst AnyComponent = () =&gt; {\n    const isAuthenticated = useIsAuthenticated()\n\n    if(isAuthenticated()){\n        // Redirect to Dashboard\n    }\n    else {\n        // Redirect to Login\n    }\n}\n</code></pre>"},{"location":"checkauth/#api","title":"API","text":"<p><code>useIsAuthenticated()</code></p> <p>Returns <code>() =&gt; boolean</code></p>"},{"location":"checkauth/#class-based-component","title":"Class Based Component","text":""},{"location":"checkauth/#import_1","title":"Import","text":"<pre><code>import {withIsAuthenticated} from 'react-auth-kit';\n</code></pre>"},{"location":"checkauth/#demo_1","title":"Demo","text":"<pre><code>import React from \"react\";\nimport {withIsAuthenticated} from 'react-auth-kit';\n\nclass SomeComponent extends React.Component {\n\n    render(){\n        if(this.props.isAuthenticated()){\n                // Redirect to Dashboard\n        }\n        else {\n            // Redirect to Login\n        }\n    }\n}\n\nexport default withIsAuthenticated(SomeComponent)\n</code></pre>"},{"location":"checkauth/#api_1","title":"API","text":"<p><code>withIsAuthenticated&lt;P&gt;(Component: React.ComponentType&lt;P&gt;): React.FC&lt;P&gt;</code></p> <p>Parameters</p> <ul> <li>Component: <code>React.ComponentType&lt;P&gt;</code></li> </ul> <p>Returns <code>React.FC&lt;P&gt;</code> (Functional Component with <code>isAuthenticated()</code> prop)</p>  <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Notice something that needs fixing? Or something that could be improved? Awesome! Here are some guidelines below that'll help you to do just that.</p> <p>In general, there are two main types of contribution,</p> <ul> <li>General improvements:</li> <li>Typo corrections.</li> <li>Fixing broken refs and links.</li> <li>Correcting inaccurate or out of date info.</li> <li> <p>Offering better explanations through clear writings and examples.</p> </li> <li> <p>New Pages or features</p> </li> <li>Adding a page of documentation that we haven't covered yet.</li> <li>Documenting a new feature that had been added to this project since its last release.</li> </ul>"},{"location":"contributing/#before-contributing","title":"Before contributing","text":"<ol> <li> <p>Read the CONTRIBUTING.md first if you haven't yet.</p> </li> <li> <p>Familiarize yourself with Mkdocs and Material for MkDocs with which we created the documentation.</p> </li> <li> <p>Read through some of our existing documents and get a feel about the overall structure and style.</p> </li> <li> <p>Read our 'Best practices' section and please ensure your PR meets those.</p> </li> </ol>"},{"location":"contributing/#steps-for-local-setup","title":"Steps for local setup","text":"<ol> <li> <p>We use Github Flow, all code changes happen through Pull Requests. Follow the steps specified at CONTRIBUTING.md to set up a local repo of the project.</p> </li> <li> <p>Install Material for MkDocs.</p> Pip <pre><code>pip install mkdocs-material\n</code></pre> <p>This will automatically install compatible versions of all dependencies: MkDocs, Markdown, Pygments and Python Markdown Extensions.</p>  Docker <p>The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the <code>latest</code> version with:</p> <pre><code>docker pull squidfunk/mkdocs-materiall\n</code></pre> <p>The mkdocs executable is provided as an entry point and serve is the default command.</p>  Git <p>Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git\n</code></pre> <p>The theme will reside in the folder mkdocs-material/material. When cloning from git, you must install all required dependencies yourself:</p> <pre><code>pip install -r mkdocs-material/requirements.txt\n</code></pre>   </li> <li> <p>All the contents are in the <code>docs</code> folder and the mkdocs config in <code>mkdocs.yml</code> relative to the project root directory.</p> </li> <li> <p>MkDocs includes a live preview server, so you can preview your changes as you modify the documentation. The server will automatically rebuild the site upon saving. Start it with:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>You are now all set up and ready to contribute!</p> </li> </ol>"},{"location":"contributing/#best-practices","title":"Best practices","text":"<ol> <li> <p>All pages must include a proper title and an introduction.</p> </li> <li> <p>If the document contains a technical term, it must be highlighted using *term* markdown syntax.</p> </li> <li> <p>If the document contains an acronym or initialism, it should be first introduced highlighted in its expanded form followed by the commonly-accepted abbreviation in brackets (like Free and open-source software (FOSS)).</p> </li> <li> <p>Use paragraphs to introduce a single concept and move on to a new paragraph before introducing another or expanding upon the first concept. Keep the size of those paragraphs to no more than four to five lines.</p> </li> <li> <p>If you find you're putting commas in a sentence consider splitting it into two or more sentences for improved clarity.</p> </li> <li> <p>Split the document up into as many sub-sections as makes sense. This is especially helpful for the readers who want to skip ahead for reference, as we can also use subheads as navigational anchors.</p> </li> </ol> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"installation/","title":"Installation","text":"<p>React-Auth-Kit is available as a npm package.</p> <p>The package also contains the type definitions, so if you are using TypeScript, this package will also work. You don't have to install any other package.</p>"},{"location":"installation/#npm","title":"Npm","text":"<p>To install and save in your <code>package.json</code> dependencies, run:</p> Install With NPM<pre><code>npm install --save react-auth-kit\n</code></pre>"},{"location":"installation/#yarn","title":"Yarn","text":"Install With Yarn<pre><code>yarn add react-auth-kit\n</code></pre> <p>Please note that react &gt;= 16, js-cookie = 2.2.1 and react-router-dom = 6.0 are peer dependencies.</p>"},{"location":"installation/#cdn","title":"CDN","text":"<p>You can start using React-Auth-Kit with minimal infrastructure, which is great for prototyping.</p> <p>Two Universal Module Definition (UMD) files are provided:</p> <ul> <li>unpkg: https://unpkg.com/react-auth-kit@2.5.0/dist/index.umd.js</li> <li> <p>jsdelivr: https://cdn.jsdelivr.net/npm/react-auth-kit@2.5.0/dist/index.umd.js</p>  </li> </ul> <p>You can follow this CDN example to quickly get started.</p>  <p>Using this approach in <code>production</code> is <code>discouraged</code> though - the client has to download the entire library, regardless of which components are actually used, affecting performance and bandwidth utilization.</p>   <p>The UMD links are using the <code>latest</code> tag to point to the latest version of the library. This pointer is <code>unstable</code>, it shifts as we release new versions. You should consider pointing to a specific version, such as v1.4.6.</p>  <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is  Apache 2.0 License code</p>"},{"location":"integration/","title":"Integration","text":"<p>React Auth Kit uses React's Context Provider to maintain it's internal state in the application. So to use auth kit, you must have to add the <code>AuthProvider</code> on the very top level of your application. Without the provider the application will fail to work and will throw errors.</p>"},{"location":"integration/#authprovider","title":"AuthProvider","text":"<p>AuthProvider is the top level context provider for React Auth Kit. By passing various props in the AuthProvider, you can configure the behaviour of React Auth Kit.</p>"},{"location":"integration/#import","title":"Import","text":"<pre><code>import { AuthProvider } from 'react-auth-kit'\n</code></pre>"},{"location":"integration/#example","title":"Example","text":"<p>Integrate <code>AuthProvider</code> before Routes. The best place is <code>app.js</code>.</p> app.js<pre><code>import React from 'react';\nimport { AuthProvider } from 'react-auth-kit'\nimport RouteComponent from './routes';\n\nconst App = () =&gt; (\n    &lt;AuthProvider authType = {'cookie'}\n                  authName={'_auth'}\n                  cookieDomain={window.location.hostname}\n                  cookieSecure={window.location.protocol === \"https:\"}&gt;\n        &lt;RouteComponent /&gt;\n    &lt;/AuthProvider&gt;\n);\n\nexport default App;\n</code></pre>  <p>Warning</p> <p><code>AuthProvider</code> should wrap the BrowserRouter or HashRouter, otherwise <code>PrivateRoute</code> will not work and throw an error.</p>   <p>Warning</p> <p>If you are using the Refresh Token feature, then you must have to add the <code>refresh</code> prop with proper value, otherwise refresh token will throw a not implemented error. If you are not using the Refresh Token feature, then don't add it</p>"},{"location":"integration/#props","title":"Props","text":"Name Type Default Description     children node  The content of the component   authType 'localstorage' | 'cookie' 'cookie' The type of the auth storage.  In localstorage, the tokens store in localStorage. In cookie, the tokens store in cookies.   authName string '_auth' The prefix for the name of the storage, which stores the auth token.  Applicable for both cookies and localStorage.   refresh createRefreshParamInterface (<code>optional</code>)  If you are using refresh token, then add this prop. The value of the props must be the return value of <code>createRefresh</code> (See Here. If you are not using refresh token, then leave the prop)   cookieDomain string   (<code>optional</code>) &lt;current hostname&gt; The Domain name for cookie. \u26a0 If authType is <code>cookie</code>, then you must put a value. More Info about Cookie Domain   cookieSecure boolean  (<code>optional</code>) &lt;current protocol&gt; The cookie secure flag. \u26a0 If authType is <code>cookie</code>, then you must put a value. More Info about Cookie Security    <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"privateroute/","title":"Private Route","text":"<p>Implement Private Route on your React App</p>  <p>React Auth Kit has a <code>RequireAuth</code> functionality Based on React Router</p>  <p>RequireAuth is only available in react-auth-kit v2.x. It can be used with React Router v6. If you are using React Router v5, please use React-kuth-kit v1.x with PrivateRoute. Visit this page to know more.</p>"},{"location":"privateroute/#import","title":"Import","text":"<pre><code>import { RequireAuth } from 'react-auth-kit'\n</code></pre>"},{"location":"privateroute/#implementation","title":"Implementation","text":"<p>Add <code>PrivateRoute</code> in your Routes Files inside <code>BrowserRouter</code> or <code>HashRouter</code></p>"},{"location":"privateroute/#demo","title":"Demo","text":"<pre><code>&lt;BrowserRouter&gt;\n    &lt;Routes&gt;\n      &lt;Route path={'/secure'} element={\n        &lt;RequireAuth loginPath={'/login'}&gt;\n          &lt;div&gt;\n            Secure\n          &lt;/div&gt;\n        &lt;/RequireAuth&gt;\n      }/&gt;\n    &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n</code></pre>  Full Code  <pre><code>import React from \"react\"\nimport {BrowserRouter, Route} from \"react-router-dom\"\nimport {PrivateRoute} from 'react-auth-kit'\nimport SecureComponent from \"./SecureComponent\";\n\nconst Routes = () =&gt; {\n  return (\n    &lt;BrowserRouter&gt;\n      &lt;Routes&gt;\n        &lt;Route path={'/login'} element={&lt;Login/&gt;}/&gt;\n        &lt;Route path={'/secure'} element={\n          &lt;RequireAuth loginPath={'/login'}&gt;\n            &lt;SecureComponent/&gt;\n          &lt;/RequireAuth&gt;\n        }/&gt;\n      &lt;/Routes&gt;\n    &lt;/BrowserRouter&gt;\n  )\n}\n</code></pre>"},{"location":"privateroute/#props","title":"Props","text":"Name Type Required Description     loginPath string  The fallback path, which will be used in case of the user is not authenticated   children React.Node  The Component, which requires authentication    <p>Added Prop: <code>loginPath</code> (Require): The fallback path, if the user is unauthorized.</p> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"refreshtoken/","title":"Refresh the Auth Token periodically","text":"<p>Often JWT comes with a new challenge. You have to <code>refresh</code> the JWT token periodically using a token, named Refresh token.</p>   <p>A refresh token is a special kind of token used to obtain a renewed access token. You can request new access tokens until the refresh token is on the DenyList. Applications must store refresh tokens securely because they essentially allow a user to remain authenticated forever.</p>  <p>React Auth Kit implements an easy approach to integrate the refresh token.</p> <p>You can either use the refresh token in your application or you can leave it.</p>"},{"location":"refreshtoken/#api-builder","title":"API Builder","text":"<p>To build the refresh token API, you have to use <code>createRefresh</code> function. It is an identity function. It is mainly used for typechecking and mobility.</p>"},{"location":"refreshtoken/#createrefresh","title":"createRefresh","text":"<p><code>createRefresh(options) =&gt; refreshApi</code></p> <p>Generate a refreshApi based on the options received</p>"},{"location":"refreshtoken/#arguments","title":"Arguments","text":"<p><code>options</code> (object): Takes a refresh object. It has 2 parameters</p> <ol> <li><code>refreshApiCallback</code> (function): This is an API function. Inside this function, you have to add a network request API. See the details</li> <li><code>interval</code> (number): The time interval in minutes, by which the <code>refreshApiCallback</code> is called and the state is updated</li> </ol>"},{"location":"refreshtoken/#returns","title":"Returns","text":"<p>A complete object of refresh token API. Add this object in the <code>AuthProvider</code> as a prop to implement the feature.</p> <pre><code>import {createRefresh} from 'react-auth-kit'\n\nconst refreshApi = createRefresh({\n  interval: 10, // Refreshs the token in every 10 minutes\n  refreshApiCallback: param =&gt; {  // API container function\n    return {\n      isSuccess: true,\n    }\n  }\n})\n\nexport default refreshApi\n</code></pre>"},{"location":"refreshtoken/#refreshapicallback","title":"refreshApiCallback","text":"<p>The container for refresh API</p>"},{"location":"refreshtoken/#arguments_1","title":"Arguments","text":"<p>The function has only one argument, which is the <code>object</code> of the latest state.</p> <p>The object contains:</p> <ol> <li><code>authToken</code> (string): The Auth token</li> <li><code>authTokenExpireAt</code> (Date) : Expiring time of the Auth token</li> <li><code>refreshToken</code> (string): The Refresh token</li> <li><code>refreshTokenExpiresAt</code> (Date): Expiring time of the refresh token</li> <li><code>authUserState</code> (object): The current User state</li> </ol>"},{"location":"refreshtoken/#returns_1","title":"Returns","text":"<p>In side the function you have to return an <code>object</code> of new auth state fetched by the API.</p> <p>The return object must contain:</p> <ol> <li><code>isSuccess</code> (boolean): If the network request is successful, then make it <code>true</code>, otherwise make it false.    If the value of this variable is false then the state will not changed, and it'll wait for the next time</li> <li><code>newAuthToken</code> (string): The value of this variable will be the new auth token. So pass the new auth token here.</li> <li><code>newAuthTokenExpireIn</code> (number)(optional): New time limit in minutes, after which the auth token will expire.    If you leave it, the old time limit will not be changed. So if you want to add more 10 minutes, then pass 10 here.</li> <li><code>newRefreshToken</code> (string)(optional): Pass the new refresh token here, if you want to refresh the refresh token itself.</li> <li><code>newRefreshTokenExpiresIn</code> (number)(optional): New time limit in minutes, after which the refresh token will expire. Works same as <code>newAuthTokenExpireIn</code></li> <li><code>newAuthUserState</code> (object)(optional): Pass the new user state. If your API updates the user state, then use this, else leave it.</li> </ol>"},{"location":"refreshtoken/#refreshapicallback-example","title":"refreshApiCallback Example","text":"<pre><code>{refreshApiCallback: (\n    {   // arguments\n      authToken,\n      authTokenExpireAt,\n      refreshToken,\n      refreshTokenExpiresAt,\n      authUserState\n    }) =&gt; {\n    axios.post('/api/refresh',\n      {\n        refreshToken: refreshToken,\n        oldAuthToken: authToken\n      }\n    ).then(({data})=&gt;{\n      return {\n        // As the request is successful, we are passing new tokens.\n        isSuccess: true,  // For successful network request isSuccess is true\n        newAuthToken: data.newAuthToken,\n        newAuthTokenExpireIn: data.newAuthTokenExpireIn\n        // You can also add new refresh token ad new user state\n      }\n    }).catch((e)=&gt;{\n      console.error(e)\n      return{\n        // As the request is unsuccessful, we are just passing the isSuccess.\n        isSuccess:false // For unsuccessful network request isSuccess is false\n      }\n    })\n  }\n}\n</code></pre>"},{"location":"refreshtoken/#api-builder-example","title":"API Builder Example","text":"<p>This is the overall example of how to use <code>createRefresh</code>. The example uses axios to make network request.</p> <pre><code>import axios from 'axios'\nimport {useAuthHeader, createRefresh} from 'react-auth-kit'\n\nconst refreshApi = createRefresh({\n  interval: 10,   // Refreshs the token in every 10 minutes\n  refreshApiCallback: (\n    {\n      authToken,\n      authTokenExpireAt,\n      refreshToken,\n      refreshTokenExpiresAt,\n      authUserState\n    }) =&gt; {\n    axios.post('/api/refresh',\n      {\n        refreshToken: refreshToken,\n        oldAuthToken: authToken\n      }\n    ).then(({data})=&gt;{\n      return {\n        isSuccess: true,  // For successful network request isSuccess is true\n        newAuthToken: data.newAuthToken,\n        newAuthTokenExpireIn: data.newAuthTokenExpireIn\n        // You can also add new refresh token ad new user state\n      }\n    }).catch((e)=&gt;{\n      console.error(e)\n      return{\n        isSuccess:false // For unsuccessful network request isSuccess is false\n      }\n    })\n  }\n})\n\nexport default refreshApi\n</code></pre>"},{"location":"refreshtoken/#integration-in-auth-provider","title":"Integration in Auth Provider","text":"<p>To add the refresh token feature, simply add the return value of <code>createRefresh</code> function in the <code>AuthProvider</code> as a prop.</p> <pre><code>import {AuthProvider} from 'react-auth-kit'\nimport refreshApi from \"./refreshApi\";\n\nfunction App() {\n  return (\n    &lt;AuthProvider\n      authName={\"_auth\"}\n      authType={\"cookie\"}\n      refresh={refreshApi}\n    &gt;\n      &lt;Routes/&gt;\n    &lt;/AuthProvider&gt;\n  );\n}\n</code></pre>  <p>Only use the return from createRefresh as the prop value</p> <p>Using values other than the return of <code>createRefresh</code> will cause the application to break. So only use the return of <code>createRefresh</code> as the prop value.</p>  <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"signin/","title":"Sign In","text":"<p> Implement Sign In on your Single Page Web App</p>  <p>React Auth Kit has easy to implement Sign In procedures.</p> <p><code>signIn</code> functionality available in both <code>React Hook</code> and <code>Higher Order Component</code></p> <ul> <li>For Functional Components, you can use <code>useSignIn()</code> hook inside any components</li> <li>For class based components, you can wrap the component inside <code>withSignIn()</code> HOC function.</li> </ul>"},{"location":"signin/#usage","title":"Usage","text":""},{"location":"signin/#functional-component","title":"Functional Component","text":"<p><code>signIn</code> in React Functional Components(FC) by adding the <code>useSignIn()</code> hook inside it.</p>"},{"location":"signin/#import","title":"Import","text":"<pre><code>import { useSignIn } from 'react-auth-kit'\n</code></pre>"},{"location":"signin/#demo","title":"Demo","text":"SignIn.js<pre><code>import { useSignIn } from 'react-auth-kit'\n\nconst SignInComponent = () =&gt; {\n    const signIn = useSignIn()\n    ...\n    const onSubmit = (e) =&gt; {\n        ...\n        if(signIn(\n            {\n                token: res.data.token,\n                expiresIn:res.data.expiresIn,\n                tokenType: \"Bearer\",\n                authState: res.data.authUserState,\n                refreshToken: res.data.refreshToken,                    // Only if you are using refreshToken feature\n                refreshTokenExpireIn: res.data.refreshTokenExpireIn     // Only if you are using refreshToken feature\n            }\n        )){\n            // Redirect or do-something\n        }else {\n            //Throw error\n        }\n    }\n\n    return (\n        ...\n    )\n}\n</code></pre>  Full Example Code  <pre><code>import React from \"react\"\nimport axios from 'axios'\nimport { useSignIn } from 'react-auth-kit'\n\nconst SignInComponent = () =&gt; {\n    const signIn = useSignIn()\n    const [formData, setFormData] = React.useState({email: '', password: ''})\n\n    const onSubmit = (e) =&gt; {\n        e.preventDefault()\n        axios.post('/api/login', formData)\n            .then((res)=&gt;{\n                if(res.status === 200){\n                    if(signIn(\n                        {\n                            token: res.data.token,\n                            expiresIn:res.data.expiresIn,\n                            tokenType: \"Bearer\",\n                            authState: res.data.authUserState,\n                            refreshToken: res.data.refreshToken,                    // Only if you are using refreshToken feature\n                            refreshTokenExpireIn: res.data.refreshTokenExpireIn     // Only if you are using refreshToken feature\n                        }\n                    )){ // Only if you are using refreshToken feature\n                        // Redirect or do-something\n                    }else {\n                        //Throw error\n                    }\n                }\n            })\n    }\n\n    return (\n        &lt;form onSubmit={onSubmit}&gt;\n            &lt;input type={\"email\"} onChange={(e)=&gt;setFormData({...formData, email: e.target.value})}/&gt;\n            &lt;input type={\"password\"} onChange={(e)=&gt;setFormData({...formData, password: e.target.value})}/&gt;\n\n            &lt;button&gt;Submit&lt;/button&gt;\n        &lt;/form&gt;\n    )\n}\n</code></pre>"},{"location":"signin/#api","title":"API","text":"<p><code>useSignIn(): (signInConfig) =&gt; boolean</code></p> <p>For details about <code>signInConfig</code>, please go to the signInConfig section</p>"},{"location":"signin/#class-based-component","title":"Class Based Component","text":"<p>Sign In using Higher Order Component using <code>withSignIn</code></p>"},{"location":"signin/#import_1","title":"Import","text":"<pre><code>import { withSignIn } from 'react-auth-kit'\n</code></pre>"},{"location":"signin/#demo_1","title":"Demo","text":"SignIn.js<pre><code>import { withSignIn } from 'react-auth-kit'\n\nclass signInComponent extends React.Component {\n\n    const onSubmit = (e) =&gt; {\n        ...\n        if(this.props.signIn(\n            {\n                token: res.data.token,\n                expiresIn:res.data.expiresIn,\n                tokenType: \"Bearer\",\n                authState: res.data.authUserState,\n                refreshToken: res.data.refreshToken,                    // Only if you are using refreshToken feature\n                refreshTokenExpireIn: res.data.refreshTokenExpireIn     // Only if you are using refreshToken feature\n            }\n        )){\n            // Redirect or do-something\n        }else {\n            //Throw error\n        }\n    }\n\n    render(){\n        ...\n    }\n}\n\nexport default withSignIn(signInComponent)\n</code></pre>  Full Example Code  <pre><code>import React from 'react'\nimport axios from 'axios'\nimport { withSignIn } from 'react-auth-kit'\n\nclass signInComponent extends React.Component {\n    state={email: '', password: ''}\n\n    onSubmit = (e) =&gt; {\n        e.preventDefault()\n        axios.post('/api/login', this.state)\n            .then((res)=&gt;{\n                if(res.status === 200){\n                    if(this.props.signIn(\n                        {\n                            token: res.data.token,\n                            expiresIn:res.data.expiresIn,\n                            tokenType: \"Bearer\",\n                            authState: res.data.authUserState,\n                            refreshToken: res.data.refreshToken,                    // Only if you are using refreshToken feature\n                            refreshTokenExpireIn: res.data.refreshTokenExpireIn     // Only if you are using refreshToken feature\n                        }\n                    )){\n                        // Redirect or do-something\n                    }else {\n                        //Throw error\n                    }\n                }\n            })\n    }\n\n    render(){\n        return (\n            &lt;form onSubmit={onSubmit}&gt;\n                &lt;input type={\"email\"} onChange={(e)=&gt;this.setState({...this.state, email: e.target.value})}/&gt;\n                &lt;input type={\"password\"} onChange={(e)=&gt;this.setState({...this.state, password: e.target.value})}/&gt;\n\n                &lt;button&gt;Submit&lt;/button&gt;\n            &lt;/form&gt;\n        )\n    }\n}\n\nexport default withSignIn(signInComponent)\n</code></pre>"},{"location":"signin/#api_1","title":"API","text":"<p><code>withSignIn(Component: React.ComponentType): React.FC</code></p> <p>Returns <code>React.FC&lt;P&gt;</code> (Functional Component with <code>signIn(signInConfig)</code> prop)</p> <p>For details about <code>signInConfig</code>, please go to the signInConfig section</p>"},{"location":"signin/#signinconfig","title":"SignInConfig","text":"<pre><code>{\n  token: string\n  tokenType: string | 'Bearer'\n  expiresIn: number\n  authState: object\n  refreshToken?: string\n  refreshTokenExpireIn?: number\n}\n</code></pre>"},{"location":"signin/#explanation-of-signinconfig","title":"Explanation of SignInConfig","text":"Name Type Description     token string The Authentication token (JWT) to be stored from server   tokenType string  | 'Bearer' The type of authentication token.   expiresIn number The time for which the auth token will last, <code>in minutes</code>   authState object (<code>optional</code>) State of the authorized user. Eg: <code>{name: Jhon, email: jhon@auth.com}</code>   refreshToken string (<code>optional</code>) Refresh Token sent by the server. Use only, if you are using refresh token feature. For more info Go to the Refresh Token page   refreshTokenExpireIn number (<code>optional</code>) The time for which the refresh token will last, <code>in minutes</code>, Use only, if you are using refresh token feature. For more info Go to the Refresh Token page    <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"signout/","title":"Sign Out","text":"<p>Implement Sign Out on your React App</p>  <p>React Auth Kit has easy to implement Sign Out procedures.</p> <p>It supports both <code>Hooks</code> and <code>Higher Order Component</code> for both Functional Components and Class-based Components</p>"},{"location":"signout/#sign-out-using-hooks","title":"Sign Out using Hooks","text":"<p>Sign Out using Hooks need <code>useSignOut</code> hook</p> <p>Add the <code>useSignOut</code> hook in the component then call the <code>signOut</code> inside the component</p> <pre><code>import { useSignOut } from 'react-auth-kit'\n</code></pre>"},{"location":"signout/#demo","title":"Demo","text":"<pre><code>import React from \"react\"\nimport { useSignOut } from 'react-auth-kit'\n\nconst SignInComponent = () =&gt; {\n    const signOut = useSignOut()\n\n    return (\n      &lt;button onClick={() =&gt; signOut()}&gt;Sign Out&lt;/button&gt;\n    )\n}\n</code></pre>"},{"location":"signout/#sign-out-using-higher-order-component","title":"Sign Out using Higher Order Component","text":"<p>Sign Out using Higher Order Component using <code>withSignOut</code>.</p> <p>Add the <code>withSignOut</code> HOC and call the <code>this.props.signOut</code> function inside the component</p> <pre><code>import { withSignOut } from 'react-auth-kit'\n</code></pre>"},{"location":"signout/#demo_1","title":"Demo","text":"<pre><code>import React from \"react\"\nimport { withSignOut } from 'react-auth-kit'\n\nclass signOutComponent extends React.Component {\n\n    render(){\n        return (\n            &lt;button onClick={() =&gt; this.props.signOut()}&gt;Sign Out&lt;/button&gt;\n        )\n    }\n}\n\nexport default withSignIn(signInComponent)\n</code></pre> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"},{"location":"update/","title":"Update Auth Kit from v1 to v2","text":""},{"location":"update/#whats-changed","title":"What's changed","text":"<ul> <li>React Auth Kit v2 comes with the support of <code>React Router v6</code>.</li> <li>React Auth Kit v2 stops using the <code>PrivateRoute</code> component.</li> <li>React Auth Kit v2 introduces new component named <code>RequireAuth</code>.</li> <li><code>RequireAuth</code> will replace the use-cases of <code>PrivateRoute</code>. It also will make the process easier to manage.</li> </ul>"},{"location":"update/#update-to-v2","title":"Update to v2","text":""},{"location":"update/#component-structure-in-v1","title":"Component structure in v1","text":"RouteComponent<pre><code>&lt;BrowserRouter&gt;\n  &lt;Switch&gt;\n    &lt;Route path={'/'} component={Home} exact/&gt;\n    &lt;Route path={'/login' } component={Login} exact/&gt;\n    &lt;PrivateRoute path={'/secure'}\n                  component={SecureComponent}\n                  loginPath={'/login'} exact\n    /&gt;\n  &lt;/Switch&gt;\n&lt;/BrowserRouter&gt;\n</code></pre>"},{"location":"update/#component-structure-in-v2","title":"Component structure in v2","text":"RouteComponent<pre><code>&lt;BrowserRouter&gt;\n  &lt;Routes&gt;\n    &lt;Route path={'/'} element={&lt;Home/&gt;}/&gt;\n    &lt;Route path={'/login' } element={&lt;Login/&gt;}/&gt;\n    &lt;Route path={'/secure'} element={\n        &lt;RequireAuth loginPath={'/login'}&gt;\n          &lt;SecureComponent/&gt;\n        &lt;/RequireAuth&gt;\n    }/&gt;\n  &lt;/Routes&gt;\n&lt;/BrowserRouter&gt;\n</code></pre> <p>\u2014 \ud83d\udd11  \u2014</p> <p>React Auth Kit is Apache 2.0 License code</p>"}]}